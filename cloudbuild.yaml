steps:
  # Step 1: Set up Docker build for Flask
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Flask Docker Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/white-proxy-434723-d6/distributed-project-app-backend:latest'  # Tagging Flask Docker image
      - './backend'  # Path to the Flask app's Dockerfile and source code

  # Step 2: Push Flask Docker image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Flask Docker Image to GCR'
    args:
      - 'push'
      - 'gcr.io/white-proxy-434723-d6/distributed-project-app-backend:latest'  # Push to GCR

  # Step 3: Authenticate to GKE and set the Kubernetes cluster context
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Authenticate to GKE'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '--location'
      - 'us-central1'  # Update to the region of your GKE cluster
      - '--project'
      - 'white-proxy-434723-d6'  # Replace with your Google Cloud project ID
      - 'flask-app-cluster'  # Replace with your actual GKE cluster name

  # Step 4: Apply namespaces to ensure 'backend' and 'frontend' namespaces exist
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Create Backend Namespace'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check the current context to verify GKE connection
        kubectl config current-context
        # Create the namespace
        kubectl apply -f ./deployment/backend/namespace.yml


  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Create Frontend Namespace'
    args:
      - 'apply'
      - '-f'
      - './deployment/frontend/namespace.yml'  # Ensure frontend namespace is created

  # Step 5: Deploy Flask App to GKE using the latest Docker image from GCR
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Deploy Flask App'
    args:
      - 'apply'
      - '-f'
      - './deployment/backend/deployment.yml'  # Flask deployment YAML
      - '-f'
      - './deployment/backend/service.yml'     # Flask service YAML

  # Step 6: Get Flask Public IP and set as an environment variable
  # - name: 'gcr.io/cloud-builders/kubectl'
  #   id: 'Get Flask Public IP'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       REACT_APP_BASE_URL=$(kubectl get svc flask-app-service -n backend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  #       echo "REACT_APP_BASE_URL=$REACT_APP_BASE_URL" >> $HOME/.env  # Write to the .env file

  # Step 7: Set up React Environment with Flask IP using the .env file
  # - name: 'gcr.io/cloud-builders/gcloud'
  #   id: 'Set up React Env'
  #   entrypoint: 'bash'
  #   args:
  #     - '-c'
  #     - |
  #       source $HOME/.env  # Load environment variables from the .env file
  #       cp $HOME/.env frontend/.env  # Set the Flask IP in React's .env

  # Step 8: Build React Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build React Docker Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/white-proxy-434723-d6/distributed-project-app-frontend:latest'  # Tagging React Docker image
      - './frontend'  # Path to React Dockerfile and source code

  # Step 9: Push React Docker image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push React Docker Image to GCR'
    args:
      - 'push'
      - 'gcr.io/white-proxy-434723-d6/distributed-project-app-frontend:latest'  # Push to GCR

  # Step 10: Deploy React App to GKE using the latest Docker image from GCR
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Deploy React App'
    args:
      - 'apply'
      - '-f'
      - './deployment/frontend/deployment.yml'  # React deployment YAML
      - '-f'
      - './deployment/frontend/service.yml'     # React service YAML

# Timeout in case something goes wrong
timeout: 1200s

options:
  logging: CLOUD_LOGGING_ONLY  # Logs will go to Cloud Logging
