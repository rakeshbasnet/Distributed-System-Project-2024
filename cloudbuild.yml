steps:
  # Step 1: Set up Docker build for Flask
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Flask Docker Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/white-proxy-434723-d6/distributed-project-app-backend:latest'  # Tagging Flask Docker image
      - './backend'  # Path to the Flask app's Dockerfile and source code

  # Step 2: Push Flask Docker image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Flask Docker Image to GCR'
    args:
      - 'push'
      - 'gcr.io/white-proxy-434723-d6/distributed-project-app-backend:latest'  # Push to GCR

  # Step 3: Apply namespaces to ensure 'backend' and 'frontend' namespaces exist
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Create Namespaces'
    args:
      - 'apply'
      - '-f'
      - './deployment/backend/namespace.yml'  # Ensure backend namespace is created
      - '-f'
      - './deployment/frontend/namespace.yml'  # Ensure frontend namespace is created

  # Step 4: Deploy Flask App to GKE using the latest Docker image from GCR
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Deploy Flask App'
    args:
      - 'apply'
      - '-f'
      - './deployment/backend/deployment.yml'  # Flask deployment YAML
      - '-f'
      - './deployment/backend/service.yml'     # Flask service YAML

  # Step 5: Get Flask Public IP and set as an environment variable
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Get Flask Public IP'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        FLASK_PUBLIC_IP=$(kubectl get svc flask-app-service -n backend -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "FLASK_PUBLIC_IP=$FLASK_PUBLIC_IP" >> $HOME/.env

  # Step 6: Set up React Environment with Flask IP
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Set up React Env'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source $HOME/.env
        echo "REACT_APP_BASE_URL=http://$FLASK_PUBLIC_IP" > frontend/.env

  # Step 7: Build React Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build React Docker Image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/white-proxy-434723-d6/distributed-project-app-frontend:latest'  # Tagging React Docker image
      - './react-app'  # Path to React Dockerfile and source code

  # Step 8: Push React Docker image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push React Docker Image to GCR'
    args:
      - 'push'
      - 'gcr.io/white-proxy-434723-d6/distributed-project-app-frontend:latest'  # Push to GCR

  # Step 9: Deploy React App to GKE using the latest Docker image from GCR
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'Deploy React App'
    args:
      - 'apply'
      - '-f'
      - 'react-deployment.yml'  # React deployment YAML
      - '-f'
      - 'react-service.yml'     # React service YAML

# Timeout in case something goes wrong
timeout: 1200s

# Optional substitution for project ID if required
substitutions:
  _PROJECT_ID: 'white-proxy-434723-d6'  # Replace with your actual Google Cloud Project ID

# Specify logsBucket for Cloud Build logs
options:
  logging: CLOUD_LOGGING_ONLY  # Logs will go to Cloud Logging
  logsBucket: gs://ds-cloud-build-log-bucket  # Replace with your actual Cloud Storage bucket
